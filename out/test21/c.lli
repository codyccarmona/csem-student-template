; ModuleID = 'QuadReader'
source_filename = "QuadReader"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@0 = private unnamed_addr constant [9 x i8] c"i is %f\0A\00", align 1
@1 = private unnamed_addr constant [9 x i8] c"x is %d\0A\00", align 1

declare i32 @printf(i8*, ...)

declare void @exit(i32)

declare i32 @getchar()

define double @func1(i32 %k) {
entry:
  %k1 = alloca i32, align 4
  store i32 %k, i32* %k1, align 4
  %t2 = load i32, i32* %k1, align 4
  %0 = add i32 %t2, 1
  ret i32 %0
}

define i32 @func2(double %z) {
entry:
  %z1 = alloca double, align 8
  store double %z, double* %z1, align 8
  %t6 = load double, double* %z1, align 8
  %0 = fadd double %t6, 2.000000e+00
  ret double %0
}

define i32 @main() {
entry:
  %i = alloca double, align 8
  %y = alloca double, align 8
  %x = alloca i32, align 4
  %t13 = call double @func1(i32 2)
  store double %t13, double* %i, align 8
  %t19 = load double, double* %i, align 8
  %t21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @0, i32 0, i32 0), double %t19)
  store double 3.000000e+00, double* %y, align 8
  %t29 = load double, double* %y, align 8
  %t31 = call i32 @func2(double %t29)
  store i32 %t31, i32* %x, align 4
  %t35 = load i32, i32* %x, align 4
  %t37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i32 0, i32 0), i32 %t35)
  ret i32 0
}
