; ModuleID = 'QuadReader'
source_filename = "QuadReader"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@0 = private unnamed_addr constant [9 x i8] c"j is %d\0A\00", align 1
@1 = private unnamed_addr constant [9 x i8] c"z is %f\0A\00", align 1
@2 = private unnamed_addr constant [9 x i8] c"i is %d\0A\00", align 1
@3 = private unnamed_addr constant [9 x i8] c"x is %f\0A\00", align 1

declare i32 @printf(i8*, ...)

declare void @exit(i32)

declare i32 @getchar()

define i32 @foo(i32 %j, double %z) {
entry:
  %j1 = alloca i32, align 4
  store i32 %j, i32* %j1, align 4
  %z2 = alloca double, align 8
  store double %z, double* %z2, align 8
  %t3 = load i32, i32* %j1, align 4
  %t5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @0, i32 0, i32 0), i32 %t3)
  %t8 = load double, double* %z2, align 8
  %t10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i32 0, i32 0), double %t8)
  ret i32 0
}

define i32 @main() {
entry:
  %x = alloca double, align 8
  %i = alloca i32, align 4
  store i32 10, i32* %i, align 4
  store double 1.500000e+01, double* %x, align 8
  %t20 = load i32, i32* %i, align 4
  %t22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i32 0, i32 0), i32 %t20)
  %t25 = load double, double* %x, align 8
  %t27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i32 0, i32 0), double %t25)
  %t30 = load i32, i32* %i, align 4
  %0 = add i32 %t30, 3
  store i32 %0, i32* %i, align 4
  %t35 = load double, double* %x, align 8
  %1 = fdiv double %t35, 3.000000e+00
  store double %1, double* %x, align 8
  %t40 = load i32, i32* %i, align 4
  %t42 = load double, double* %x, align 8
  %t44 = call i32 @foo(i32 %t40, double %t42)
  ret i32 0
}
