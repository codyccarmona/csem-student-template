; ModuleID = 'QuadReader'
source_filename = "QuadReader"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@0 = private unnamed_addr constant [18 x i8] c"i = %d, sum = %d\0A\00", align 1

declare i32 @printf(i8*, ...)

declare void @exit(i32)

declare i32 @getchar()

define i32 @main() {
entry:
  %i = alloca i32, align 4
  %sum = alloca i32, align 4
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %i, align 4
  %t9 = load i32, i32* %i, align 4
  %0 = add i32 %t9, 1
  store i32 %0, i32* %i, align 4
  %t14 = load i32, i32* %i, align 4
  %t16 = icmp sge i32 %t14, 100
  br i1 %t16, label %L1, label %L1

L1:                                               ; preds = %entry, %entry

L2:                                               ; No predecessors!
  %t18 = load i32, i32* %sum, align 4
  %t20 = icmp sle i32 %t18, 200
  br i1 %t20, label %L3, label %L3

L3:                                               ; preds = %L2, %L2

L4:                                               ; No predecessors!
  %t22 = load i32, i32* %sum, align 4
  %t24 = icmp eq i32 %t22, 50
  br i1 %t24, label %L5, label %L5

L5:                                               ; preds = %L4, %L4

L6:                                               ; No predecessors!
  %t27 = load i32, i32* %sum, align 4
  %t29 = load i32, i32* %i, align 4
  %1 = add i32 %t27, %t29
  store i32 %1, i32* %sum, align 4
  %t34 = load i32, i32* %i, align 4
  %t36 = load i32, i32* %sum, align 4
  %t38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @0, i32 0, i32 0), i32 %t34, i32 %t36)
  ret i32 0
}
